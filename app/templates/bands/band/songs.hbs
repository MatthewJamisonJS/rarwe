{{page-title "Songs | Rock & Roll with Octane" replace=true}}

{{#if @model.length}}
  <ul>
    {{#each @model as |song|}}
      {{! The way to call components in Ember is by typing the (camelized)
    name of the component in angle brackets. Component arguments need to be prefixed by
    @ and html attributes (like class) need to be passed without a prefix (class="mt-4").
    Component invocations need to start with a capital letter, to distinguish them from html tags. }}
      <li class="mb-2">
        {{song.title}}
        <span class="float-right">
          {{! StarRating Component is extended by this argument. a function gets called
          when a star is clicked by utilizing the @onUpdate. The helper "set" is key in defining the function
          The first argument to "set" is the object we update. The second is the name of the property we're updating.
          If we don't provide the third argument, the property will be set to the value the function is called with.
          We now have to call the @onUpdate function from the component whenever one of the stars is clicked.}}
          <StarRating @rating={{song.rating}} @onUpdate={{set song "rating"}} />
        </span>
      </li>
    {{/each}}
  </ul>
{{else}}
  <p class="text-center">
    The band has no songs yet.
  </p>
{{/if}}

{{! <StarRating> is a component invocation. Component arguments need to be prefixed with @
upon calling: @rating and @onUpdate are the arguments we're passing in. }}

{{!-- The set in {{set song "rating"}} is again a helper, implemented by the
ember-set-helper add-on. So is fn --}}